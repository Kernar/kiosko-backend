// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  email      String   @unique
  firstName  String
  lastName   String
  phone      String
  birthdate  DateTime
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  carts      Cart[]
  orders     Order[]
  passwordResets PasswordReset[]
}

model Product {
  id              String   @id @default(uuid())
  name            String
  description     String
  price           Float
  brand           String
  imageUrl        String
  availableStock  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
}

model Cart {
  id         String   @id @default(uuid())
  userId     String   @unique
  isActive   Boolean  @default(true) // Indica si el carrito está activo
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  items      CartItem[]

  @@index([userId], name: "user_cart_index") // Índice para optimizar búsquedas por usuario
}

model CartItem {
  id         String   @id @default(uuid())
  cartId     String
  productId  String
  quantity   Int
  currentPrice Float    // Precio del producto al momento de agregarlo al carrito
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // Evita duplicados de productos en el mismo carrito
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  total      Float
  status     String   // Ejemplo: "pendiente", "completado", "cancelado"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float    // Precio del producto al momento de la compra
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId]) // Evita duplicados de productos en el mismo pedido
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     String   
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
}
